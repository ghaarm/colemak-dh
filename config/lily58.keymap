/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * https://colemakmods.github.io/mod-dh/keyboards.html
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
// #include <dt-bindings/zmk/ext_power.h>

// https://joshinator.de/posts/zmk-combo-helper/
#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <500>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

#define DEFAULT 0
#define LOWER 1
#define UPPER 2


/ {
    combos {
                compatible = "zmk,combos";

                COMBO(ae, &kp SQT, 25 51)
                COMBO(oe, &kp SEMICOLON, 34 51)
                COMBO(ue, &kp LEFT_BRACKET, 20 51)
                COMBO(ss, &kp MINUS, 27 51)
            };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   +    |
            // |  TAB  |  Q  |  W  |  F   |  R   |  B   |                   |  J   |  U    |  U    |  Y   |      |   #   |
            // | SHIFT |  A  |  R  |  S   |  T   |  G   |                   |  M   |  N    |  E    |  I   |   O   | SHIFT |
            // | CTRL  |  Z  |  X  |  C   |  D   |  V   | "hyper"|  | "meh" |  K   |  H    |  ,    |  .   |   -   |  |
            //                     | ALT  | REP  | LOWER|  ENTER |  | SPACE | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE        &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                                                 &kp N6    &kp N7  &kp N8     &kp N9   &kp N0             &kp MINUS
&kp TAB           &kp Q   &kp W   &kp F     &kp P     &kp B                                                  &kp J     &kp L   &kp U      &kp Z    &kp RIGHT_BRACKET  &kp NON_US_HASH
&kp LEFT_CONTROL  &kp A   &kp R   &kp S     &kp T     &kp G                                                  &kp M     &kp N   &kp E      &kp I    &kp O              &kp GRAVE
&kp LEFT_SHIFT    &kp Y   &kp X   &kp C     &kp D     &kp V   &kp LS(LA(LC(LGUI)))    &kp RC(RG(RIGHT_ALT))  &kp K     &kp H   &kp COMMA  &kp DOT  &kp SLASH          &kp RIGHT_SHIFT
                                  &kp LGUI  &kp LALT  &mo 1   &kp ENTER               &kp SPACE              &kp BSPC  &mo 2   &kp RGUI
            >;

            //     bindings = <
            //     &macro_alt_a_ae     // Zuweisung des Makros an Alt + A
            // >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp GRAVE  &kp EXCLAMATION   &kp DOUBLE_QUOTES  &kp LS(KP_NUMBER_3)  &kp DOLLAR        &kp PERCENT                        &kp AMPERSAND   &kp SLASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL   &kp QUESTION
&trans     &kp LS(NUMBER_1)  &kp LS(NUMBER_2)   &kp LS(N3)           &kp LS(NUMBER_4)  &kp LS(N5)                         &kp LS(N6)      &kp LS(N7)      &kp LS(N8)            &kp LS(N9)             &kp LS(N0)  &kp EQUAL
&trans     &kp KP_NUMBER_1   &kp KP_NUMBER_2    &kp KP_NUMBER_3      &kp KP_NUMBER_4   &kp KP_NUMBER_5                    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW          &kp RIGHT_ARROW        &none       &kp PIPE
&trans     &kp KP_NUMBER_6   &kp KP_NUMBER_7    &kp KP_NUMBER_8      &kp KP_NUMBER_9   &kp KP_NUMBER_0  &trans    &trans  &kp TILDE       &kp SEMICOLON   &kp UNDERSCORE        &kp LBRC               &kp RBRC    &kp PIPE
                                                &trans               &trans            &trans           &trans    &trans  &trans          &trans          &trans
            >;
        };

        upper_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none         &none         &none         &none         &none         &none                         &none       &none           &none              &none            &none       &none
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                        &kp F7      &kp F8          &kp F9             &kp F10          &none       &none
&trans        &none         &none         &none         &none         &none                         &none       &none           &none              &none            &none       &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR  &none     &none   &bt BT_CLR  &kp C_PREVIOUS  &kt C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &kt C_PLAY_PAUSE
                                          &trans        &trans        &trans      &trans    &trans  &trans      &trans
            >;
        };
    };
};
