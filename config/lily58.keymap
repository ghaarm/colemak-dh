/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 * https://colemakmods.github.io/mod-dh/keyboards.html
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

// #include <dt-bindings/zmk/ext_power.h>
// https://joshinator.de/posts/zmk-combo-helper/

#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <500>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
  };

#define DEFAULT 0
#define LOWER 1
#define UPPER 2

&mt { tapping-term-ms = <200>; };

/ {

  behaviors {
    tp_repeat_mo1: tp_repeat_mo1 {
    compatible = "zmk,behavior-hold-tap";
    label = "TP_REPEAT_MO1";
    #binding-cells = <2>;
    tapping-term-ms = <200>;
    bindings = <&key_repeat>, <&mo>;
    };
// macros {
    //   alt_backspace: alt_backspace {
    //     compatible = "zmk,behavior-macro";
    //     #binding-cells = <0>;
    //     // bindings = <&macro_tap &kp LALT &kp BSPC>;
    //     bindings = <&macro_press &kp LALT>
    //     , <&macro_tap &kp BSPC>
    //     , <&macro_release &kp LALT>
    //     ;
    //   };
    // };


    // behaviors {
        morph_ae: morph_ae {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&kp SQT>;

            mods = <(MOD_LALT)>;
        };

        morph_oe: morph_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp O>, <&kp SEMICOLON>;

            mods = <(MOD_LALT)>;
        };

        morph_ue: morph_ue {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp U>, <&kp LEFT_BRACKET>;

            mods = <(MOD_LALT)>;
        };

        morph_ss: morph_ss {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp MINUS>;

            mods = <(MOD_LALT)>;
        };

        morph_bspc: morph_bspc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT)>;
        };

        // morph_space: morph_space {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp SPACE>, <&kp RGUI>;
        //
        //     mods = <(MOD_RSFT)>;
        // };

        // morph_bspc: morph_bspc {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&alt_backspace>, <&kp BSPC>, <&kp DEL>;
        //
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        // };
        // morph_bspc: morph_bspc {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&alt_backspace>, <&kp BSPC>;
        //
        //     mods = <(MOD_LSFT)>;
        // };
        // morph_ABC: morph_ABC {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp A>, <&morph_BC>;
        //     mods = <(MOD_LSFT|MOD_RSFT)>;
        // };
    };

    combos {
        compatible = "zmk,combos";

        COMBO(lgui-enter, &kp LG(RET), 24 53 54)
        COMBO(ctrl-enter-repeat, &key_repeat, 36 53)


        // COMBO(ae, &kp SQT, 25 51)
        // COMBO(oe, &kp SEMICOLON, 34 51)
        // COMBO(ue, &kp LEFT_BRACKET, 20 51)
        // COMBO(ss, &kp MINUS, 27 51)
        // COMBO(ae-ss, &kp SQT &kp MINUS, 25 27 51) // combo wrong technique maybe custom behaviour
        // COMBO(ue-ss, &kp LEFT_BRACKET &kp MINUS, 20 27 51)
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   +    |
            // |  TAB  |  Q  |  W  |  F   |  R   |  B   |                   |  J   |  U    |  U    |  Y   |      |   #   |
            // | SHIFT |  A  |  R  |  S   |  T   |  G   |                   |  M   |  N    |  E    |  I   |   O   | SHIFT |
            // | CTRL  |  Z  |  X  |  C   |  D   |  V   | "hyper"|  | "meh" |  K   |  H    |  ,    |  .   |   -   |  |
            //                     | ALT  | REP  | LOWER|  ENTER |  | SPACE | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE             &kp N1     &kp N2  &kp N3     &kp N4    &kp N5                                            &kp N6       &kp N7  &kp N8     &kp N9   &kp N0             &kp MINUS
&mt LG(LC(LA(LEFT_SHIFT))) TAB                &kp Q      &kp W   &kp F      &kp P     &kp B                                             &kp J        &kp L   &morph_ue  &kp Z    &kp RIGHT_BRACKET  &kp NON_US_HASH
&mt LEFT_SHIFT ESCAPE  &morph_ae  &kp R   &morph_ss  &kp T     &kp G                                             &kp M        &kp N   &kp E      &kp I    &morph_oe          &kp RIGHT_SHIFT
&kp LEFT_CONTROL       &kp Y      &kp X   &kp C      &kp D     &kp V   &kp CAPS          &kp LC(LA(LEFT_SHIFT))  &kp K        &kp H   &kp COMMA  &kp DOT  &kp SLASH          &kp GRAVE
                                          &key_repeat   &mt LALT DEL &tp_repeat_mo1 0 1   &mt LGUI ENTER    &kp SPC            &morph_bspc  &mo 2   &kp RGUI
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp NON_US_BSLH  &kp EXCLAMATION   &kp AT_SIGN       &kp LS(NUMBER_3)  &kp DOLLAR        &kp PERCENT                    &kp AMPERSAND   &kp SLASH       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL   &kp QUESTION
&kp NON_US_BSLH  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(N3)        &kp LS(NUMBER_4)  &kp LS(N5)                     &kp LS(N6)      &kp LS(N7)      &kp LS(N8)            &kp LS(N9)             &kp LS(N0)  &kp LS(MINUS)
&trans           &kp N1            &kp NUMBER_2      &kp N3            &kp N4            &kp N5                         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW          &kp RIGHT_ARROW        &none       &kp EQUAL
&trans           &kp NUMBER_6      &kp N7            &kp N8            &kp KP_NUMBER_9   &kp N0       &trans    &trans  &kp LS(LG(N8))  &kp LS(LG(N9))  &kp LA(N8)            &kp LA(N9)             &none       &kp PIPE
                                                     &trans            &trans            &trans       &trans    &trans  &trans          &trans          &trans
            >;
        };

        upper_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none         &none         &none         &none         &none         &none                         &none         &none            &none              &none            &none         &none
&none         &none         &none         &none         &none         &none                         &none         &none            &none              &none            &none         &none
&none         &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                        &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&none         &kp F6        &kp F7        &kp F8        &kp F9        &kp F10     &none     &none   &bt BT_CLR    &kp C_PREVIOUS   &kt C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &kt C_PLAY_PAUSE
                                          &trans        &trans        &trans      &trans    &trans  &trans        &trans
            >;
        };
    };
};
